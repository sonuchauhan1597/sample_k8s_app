name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Setup Minikube
      run: |
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        chmod +x minikube-linux-amd64
        sudo mv minikube-linux-amd64 /usr/local/bin/minikube
        minikube start --driver=docker
        alias kubectl="minikube kubectl --"

    - name: Build Docker Images
      run: |
        eval $(minikube docker-env)  # Ensure Minikube's Docker daemon is used
        docker build -t backend:latest ./backend
        docker build -t frontend:latest ./frontend
        docker build -t nginx-test:1.19 .  # Assuming nginx Dockerfile is in the root
        docker images

    - name: Install Trivy
      run: |
        sudo apt-get install -y wget
        wget https://github.com/aquasecurity/trivy/releases/download/v0.25.0/trivy_0.25.0_Linux-64bit.deb
        sudo dpkg -i trivy_0.25.0_Linux-64bit.deb

    - name: Scan Local Docker Images with Trivy
      run: |
        eval $(minikube docker-env)
        trivy image backend:latest
        trivy image frontend:latest
        trivy image nginx-test:1.19

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/v1.24.0/bin/linux/amd64/kubectl"
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl
        kubectl version --client

    - name: Create Namespace
      run: |
        kubectl create namespace my-namespace || echo "Namespace already exists"
        kubectl create secret generic nginx-ssl --from-file=./certs/nginx.crt --from-file=./certs/nginx.key -n my-namespace
        kubectl create configmap nginx-config --from-file=nginx.conf -n my-namespace
        minikube start

    - name: Apply Kubernetes Resources
      run: |
        eval $(minikube docker-env)
        kubectl apply -f ./kubernetes

    - name: Wait for Backend Pods
      run: |
        echo "Waiting for backend pods to be ready..."
        for i in {1..5}; do
          kubectl wait --for=condition=ready pod -l app=backend -n my-namespace --timeout=10s && break
          echo "Retrying backend pod readiness in 10 seconds..."
          sleep 10
        done

    - name: Wait for Frontend Pods
      run: |
        echo "Waiting for frontend pods to be ready..."
        for i in {1..5}; do
          kubectl wait --for=condition=ready pod -l app=frontend -n my-namespace --timeout=10s && break
          echo "Retrying frontend pod readiness in 10 seconds..."
          sleep 10
        done

    - name: Wait for Nginx Pods
      run: |
        echo "Waiting for nginx pods to be ready..."
        for i in {1..5}; do
          kubectl wait --for=condition=ready pod -l app=nginx -n my-namespace --timeout=10s && break
          echo "Retrying nginx pod readiness in 10 seconds..."
          sleep 10
        done

    - name: Debug Pod Creation
      run: |
        echo "Listing all pods in namespace 'my-namespace'..."
        kubectl get pods -n my-namespace -o wide
        echo "Describing pods in namespace 'my-namespace'..."
        kubectl describe pods -n my-namespace

    - name: See pods and deployments
      run: |
        kubectl get pods -n my-namespace
        kubectl get deploy -n my-namespace
        kubectl get secrets -n my-namespace
        kubectl get svc -n my-namespace

    - name: Start Nginx Service
      run: |
        minikube service nginx-service -n my-namespace --url > nginx_url.txt
        echo "Service URL captured: $(cat nginx_url.txt)"

    - name: Convert URL to HTTPS
      run: |
        HTTP_URL=$(cat nginx_url.txt)
        HTTPS_URL=$(echo $HTTP_URL | sed 's|http://|https://|')
        echo "Converted to HTTPS URL: $HTTPS_URL"
        echo $HTTPS_URL > https_url.txt

    - name: Test Nginx HTTPS Service
      run: |
        HTTPS_URL=$(cat https_url.txt)
        echo "Testing HTTPS URL: $HTTPS_URL"
        curl -k $HTTPS_URL/index.html

    - name: Debug HTTPS Response
      run: |
        HTTPS_URL=$(cat https_url.txt)
        echo "Testing full HTTPS response..."
        curl -v -k $HTTPS_URL

