name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Setup Minikube
      run: |
        curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        chmod +x minikube-linux-amd64
        sudo mv minikube-linux-amd64 /usr/local/bin/minikube
        minikube start --driver=docker
        alias kubectl="minikube kubectl --"

    - name: Build Docker Images
      run: |
        eval $(minikube docker-env)  # Ensure Minikube's Docker daemon is used
        docker build -t backend:latest ./backend
        docker build -t frontend:latest ./frontend
        docker build -t nginx-test:1.19 .  # Assuming nginx Dockerfile is in the root
        docker images

    - name: Install Trivy
      run: |
        sudo apt-get install -y wget
        wget https://github.com/aquasecurity/trivy/releases/download/v0.25.0/trivy_0.25.0_Linux-64bit.deb
        sudo dpkg -i trivy_0.25.0_Linux-64bit.deb

    - name: Scan Local Docker Images with Trivy
      run: |
        eval $(minikube docker-env)
        trivy image backend:latest
        trivy image frontend:latest
        trivy image nginx-test:1.19

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/v1.24.0/bin/linux/amd64/kubectl"
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl
        kubectl version --client

    - name: Create Namespace
      run: |
        kubectl create namespace my-namespace || echo "Namespace already exists"

    - name: Apply Kubernetes Resources
      run: |
        kubectl apply -f ./kubernetes/backend-deployment.yaml
        kubectl apply -f ./kubernetes/frontend-deployment.yaml
        kubectl apply -f ./kubernetes/nginx-deployment.yaml
        kubectl apply -f ./kubernetes/nginx-service.yaml

    - name: Wait for Pods to be Ready
      run: |
        kubectl wait --for=condition=ready pod -l app=backend -n my-namespace --timeout=60s
        kubectl wait --for=condition=ready pod -l app=frontend -n my-namespace --timeout=60s
        kubectl wait --for=condition=ready pod -l app=nginx -n my-namespace --timeout=60s

    - name: See pods and deployments
      run: |
        kubectl get pods -n my-namespace
        kubectl get deploy -n my-namespace

    - name: Expose Services via localhost.run
      run: |
        FRONTEND_TUNNEL=$(curl -s -X POST http://localhost.run -d "port=30001") # Replace with actual frontend NodePort
        BACKEND_TUNNEL=$(curl -s -X POST http://localhost.run -d "port=30002") # Replace with actual backend NodePort
        echo "Frontend URL: $FRONTEND_TUNNEL"
        echo "Backend URL: $BACKEND_TUNNEL"
        echo "FRONTEND_URL=$FRONTEND_TUNNEL" >> $GITHUB_ENV
        echo "BACKEND_URL=$BACKEND_TUNNEL" >> $GITHUB_ENV

    - name: Output Public URLs
      run: |
        echo "Access Frontend at: ${{ env.FRONTEND_URL }}"
        echo "Access Backend at: ${{ env.BACKEND_URL }}"

    - name: Curl Frontend and Backend URLs for verification
      run: |
        echo "Verifying Frontend URL..."
        curl -s "${{ env.FRONTEND_URL }}"
        
        echo "Verifying Backend URL..."
        curl -s "${{ env.BACKEND_URL }}"
